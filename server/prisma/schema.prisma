// This is your Prisma schema file

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  ADMIN
  USER
}

enum Priority {
  LOW
  MEDIUM
  HIGH
  URGENT
}

enum TaskType {
  TASK
  BUG
  STORY
  EPIC
}

model User {
  id            String         @id @default(uuid())
  email         String         @unique
  password      String
  name          String
  avatar        String?
  role          Role          @default(USER)
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt
  projects      Project[]     @relation("ProjectMembers")
  ownedProjects Project[]     @relation("ProjectOwner")
  tasks         Task[]        @relation("TaskAssignee")
  createdTasks  Task[]        @relation("TaskCreator")
  comments      Comment[]
  timeEntries   TimeEntry[]
}

model Project {
  id          String        @id @default(uuid())
  name        String
  key         String        @unique
  description String?
  ownerId     String
  owner       User          @relation("ProjectOwner", fields: [ownerId], references: [id])
  members     User[]        @relation("ProjectMembers")
  boards      Board[]
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
}

model Board {
  id          String        @id @default(uuid())
  name        String
  projectId   String
  project     Project       @relation(fields: [projectId], references: [id], onDelete: Cascade)
  columns     Column[]
  tasks       Task[]
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
}

model Column {
  id          String        @id @default(uuid())
  name        String
  order       Int
  boardId     String
  board       Board         @relation(fields: [boardId], references: [id], onDelete: Cascade)
  tasks       Task[]
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
}

model Task {
  id          String        @id @default(uuid())
  number      String        @unique
  title       String
  description String?
  type        TaskType      @default(TASK)
  priority    Priority      @default(MEDIUM)
  boardId     String
  board       Board         @relation(fields: [boardId], references: [id], onDelete: Cascade)
  columnId    String
  column      Column        @relation(fields: [columnId], references: [id])
  assigneeId  String?
  assignee    User?         @relation("TaskAssignee", fields: [assigneeId], references: [id])
  creatorId   String
  creator     User          @relation("TaskCreator", fields: [creatorId], references: [id])
  order       Int
  comments    Comment[]
  timeEntries TimeEntry[]
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
}

model Comment {
  id          String        @id @default(uuid())
  content     String
  taskId      String
  task        Task          @relation(fields: [taskId], references: [id], onDelete: Cascade)
  userId      String
  user        User          @relation(fields: [userId], references: [id])
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
}

model TimeEntry {
  id          String        @id @default(uuid())
  description String?
  timeSpent   Int          // Duration in minutes
  date        DateTime
  taskId      String
  task        Task          @relation(fields: [taskId], references: [id], onDelete: Cascade)
  userId      String
  user        User          @relation(fields: [userId], references: [id])
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
}