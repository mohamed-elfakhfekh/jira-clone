// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  ADMIN
  USER
}

enum Priority {
  LOW
  MEDIUM
  HIGH
  URGENT
}

enum TaskType {
  TASK
  BUG
  STORY
  EPIC
}

enum KPIType {
  CYCLE_TIME
  LEAD_TIME
  VELOCITY
  COMPLETION_RATE
  TIME_ESTIMATION_ACCURACY
  CUSTOM
}

model User {
  id            String          @id @default(uuid())
  email         String          @unique
  password      String
  name          String
  avatar        String?
  role          Role            @default(USER)
  createdAt     DateTime        @default(now())
  updatedAt     DateTime        @updatedAt
  projects      ProjectMember[]
  ownedProjects Project[]       @relation("ProjectOwner")
  tasks         Task[]          @relation("TaskAssignee")
  createdTasks  Task[]          @relation("TaskCreator")
  designedTasks Task[]          @relation("TaskDesigner")
  testedTasks   Task[]          @relation("TaskTester")
  comments      Comment[]
  timeEntries   TimeEntry[]
}

model Project {
  id          String           @id @default(uuid())
  name        String
  key         String           @unique
  description String?
  startDate   DateTime?
  endDate     DateTime?
  ownerId     String
  owner       User             @relation("ProjectOwner", fields: [ownerId], references: [id])
  members     ProjectMember[]
  board       Board?           @relation("ProjectMainBoard")
  tasks       Task[]           @relation("ProjectTasks")
  timeEntries TimeEntry[]      @relation("ProjectTimeEntries")
  kpis        ProjectKPI[]
  createdAt   DateTime         @default(now())
  updatedAt   DateTime         @updatedAt
}

model ProjectMember {
  id          String   @id @default(uuid())
  assignedAt  DateTime @default(now())
  assignedBy  String
  userId      String
  user        User     @relation(fields: [userId], references: [id])
  projectId   String
  project     Project  @relation(fields: [projectId], references: [id])
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@unique([userId, projectId])
}

model Board {
  id        String    @id @default(uuid())
  name      String
  projectId String    @unique
  project   Project   @relation("ProjectMainBoard", fields: [projectId], references: [id])
  columns   Column[]
  tasks     Task[]    @relation("BoardTasks")
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
}

model Column {
  id        String   @id @default(uuid())
  name      String
  order     Int
  boardId   String
  board     Board    @relation(fields: [boardId], references: [id], onDelete: Cascade)
  tasks     Task[]   @relation("ColumnTasks")
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Task {
  id          String       @id @default(uuid())
  number      String      @unique
  title       String
  description String?
  type        TaskType    @default(TASK)
  priority    Priority    @default(MEDIUM)
  order       Int
  projectId   String
  project     Project     @relation("ProjectTasks", fields: [projectId], references: [id], onDelete: Cascade)
  boardId     String
  board       Board       @relation("BoardTasks", fields: [boardId], references: [id])
  columnId    String
  column      Column      @relation("ColumnTasks", fields: [columnId], references: [id])
  assigneeId  String?
  assignee    User?       @relation("TaskAssignee", fields: [assigneeId], references: [id])
  creatorId   String
  creator     User        @relation("TaskCreator", fields: [creatorId], references: [id])
  designerId  String?
  designer    User?       @relation("TaskDesigner", fields: [designerId], references: [id])
  testerId    String?
  tester      User?       @relation("TaskTester", fields: [testerId], references: [id])
  startedAt   DateTime?
  completedAt DateTime?
  estimatedTime Int?      // in hours
  timeSpent    Int?      // in hours
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
  timeEntries TimeEntry[]
  comments    Comment[]
}

model Comment {
  id        String   @id @default(uuid())
  content   String
  taskId    String
  task      Task     @relation(fields: [taskId], references: [id], onDelete: Cascade)
  userId    String
  user      User     @relation(fields: [userId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model TimeEntry {
  id          String   @id @default(uuid())
  description String?
  timeSpent   Int      // Duration in minutes
  date        DateTime
  taskId      String
  task        Task     @relation(fields: [taskId], references: [id], onDelete: Cascade)
  userId      String
  user        User     @relation(fields: [userId], references: [id])
  projectId   String
  project     Project  @relation("ProjectTimeEntries", fields: [projectId], references: [id], onDelete: Cascade)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model ProjectKPI {
  id          String    @id @default(uuid())
  name        String
  target      Float
  current     Float     @default(0)
  unit        String    // e.g., "hours", "percentage", "count"
  type        KPIType   @default(CUSTOM)
  description String?
  startDate   DateTime  @default(now())
  endDate     DateTime?
  projectId   String
  project     Project   @relation(fields: [projectId], references: [id], onDelete: Cascade)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}